<?xml version="1.0"?>
<robot name="racecar" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Gazebo references -->

  <gazebo reference="chassis">
    <mu1 value="0.0" />
    <mu2 value="0.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="left_rear_wheel">
    <mu1 value="1.0" />
    <mu2 value="1.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="1 0 0" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_rear_wheel">
    <mu1 value="1.0" />
    <mu2 value="1.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="1 0 0" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="left_front_wheel">
    <mu1 value="1.0" />
    <mu2 value="1.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="0 0 1" />
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_front_wheel">
    <mu1 value="1.0" />
    <mu2 value="1.0" />
    <kp value="10000000.0" />
    <kd value="1.0" />
    <fdir1 value="0 0 1" />
    <material>Gazebo/Black</material>
  </gazebo>

  <!-- Gazebo plugins -->

  <!-- hokuyo -->
  <xacro:unless value="$(optenv DISABLE_GAZEBO_LASER false)">
    <gazebo reference="laser">
      <sensor name="lidar" type="ray">
        <pose>0 0 0 0 0 0</pose>
        <always_on>true</always_on>
        <visualize>false</visualize>
        <update_rate>10</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>120</samples>
              <resolution>1.000000</resolution>
              <min_angle>-3.14159</min_angle>
              <max_angle>3.14159</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.3</min>
            <max>15.0</max>
            <resolution>0.015</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>laser</frame_name>
        </plugin>
      </sensor>

      <!-- <material>Gazebo/Grey</material>
      <sensor type="ray" name="hokuyo_sensor">
        <pose>0 0 0.0124 0 0 0</pose>
        <visualize>false</visualize>
        <update_rate>40</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>1081</samples>
              <resolution>1</resolution>
              <min_angle>-2.3561944902</min_angle>
              <max_angle>2.3561944902</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.1</min>
            <max>10.0</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="gazebo_ros_hokuyo_controller" filename="libgazebo_ros_laser.so">
          <topicName>/scan</topicName>
          <frameName>laser</frameName>
        </plugin>
      </sensor> -->
    </gazebo>
  </xacro:unless>

  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <orientation>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-1</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-1</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-1</stddev>
            </noise>
          </z>
        </orientation>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
      <topic>imu</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>100.0</updateRateHZ>
        <!-- <gaussianNoise>0.0</gaussianNoise> -->
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
        <ros>
          <namespace>/imu</namespace>
          <remapping>~/out:=data</remapping>
        </ros>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

  <!-- zed camera -->
  <xacro:unless value="$(optenv DISABLE_GAZEBO_CAMERA false)">
    <gazebo reference="camera_link">
      <sensor type="camera" name="zed_camera_left_sensor">
        <update_rate>30.0</update_rate>
        <!-- math.atan(320 / 687.8065795898438) * 2 -->
        <camera name="zed_camera_left_camera">
          <horizontal_fov>0.8709216071359963</horizontal_fov>
          <image>
            <width>640</width>
            <height>480</height>
            <format>B8G8R8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>30.0</updateRate>
          <cameraName>/camera/zed</cameraName>
          <imageTopicName>rgb/image_rect_color</imageTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0</hackBaseline> <!-- set this to 0.12 for the second camera -->
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:unless>

  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <plugin>gazebo_ros2_control/GazeboSystem</plugin>
    </hardware>
    <!-- velocity controller -->
    <joint name="left_rear_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="right_rear_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="left_front_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="right_front_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <!-- position controller for steering -->
    <joint name="left_steering_hinge_joint">
      <command_interface name="position">
        <param name="min">-0.5</param>
        <param name="max">0.5</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <joint name="right_steering_hinge_joint">
      <command_interface name="position">
        <param name="min">-0.5</param>
        <param name="max">0.5</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
      <state_interface name="effort"/>
    </joint>
    <!-- wanted to add ros2 control's imu -->
    <!-- but there's no option for imu covariance setting -->
    <!-- <sensor name="racecar_imu_sensor">
      <state_interface name="orientation.x"/>
      <state_interface name="orientation.y"/>
      <state_interface name="orientation.z"/>
      <state_interface name="orientation.w"/>
      <state_interface name="angular_velocity.x"/>
      <state_interface name="angular_velocity.y"/>
      <state_interface name="angular_velocity.z"/>
      <state_interface name="linear_acceleration.x"/>
      <state_interface name="linear_acceleration.y"/>
      <state_interface name="linear_acceleration.z"/>
    </sensor> -->
  </ros2_control>

  <gazebo>
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
      <parameters>$(find sw_ros2_control_gazebo)/config/racecar_controller.yaml</parameters>
    </plugin>
  </gazebo>

</robot>
